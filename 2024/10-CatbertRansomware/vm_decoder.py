CODE = [ 0x01,0x00,0x00,0x01,0x42,0x41,0x06,0x01,0x00,0x01,0x01,0x44,0x43,0x06,0x01,0x00,0x02,0x01,0x46,0x45,0x06,0x01,0x00,0x03,0x01,0x32,0x31,0x06,0x01,0x00,0x04,0x01,0x34,0x33,0x06,0x01,0x00,0x05,0x01,0x36,0x35,0x06,0x01,0x00,0x06,0x01,0x38,0x37,0x06,0x01,0x00,0x07,0x01,0x30,0x39,0x06,0x01,0x00,0x08,0x01,0x00,0x03,0x05,0x01,0x00,0x30,0x1e,0x01,0x00,0x02,0x05,0x01,0x00,0x20,0x1e,0x1b,0x01,0x00,0x01,0x05,0x01,0x00,0x10,0x1e,0x1b,0x01,0x00,0x00,0x05,0x1b,0x06,0x01,0x00,0x09,0x01,0x00,0x07,0x05,0x01,0x00,0x30,0x1e,0x01,0x00,0x06,0x05,0x01,0x00,0x20,0x1e,0x1b,0x01,0x00,0x05,0x05,0x01,0x00,0x10,0x1e,0x1b,0x01,0x00,0x04,0x05,0x1b,0x06,0x01,0x00,0x1e,0x01,0xff,0xff,0x06,0x01,0x00,0x1d,0x01,0x00,0x1e,0x05,0x06,0x01,0x00,0x1e,0x01,0x00,0x1e,0x05,0x01,0x00,0x10,0x1e,0x01,0x00,0x1d,0x05,0x1b,0x06,0x01,0x00,0x1b,0x01,0x00,0x00,0x06,0x01,0x00,0x1f,0x01,0x00,0x00,0x06,0x01,0x00,0x20,0x01,0x00,0x00,0x06,0x01,0x00,0x13,0x01,0x15,0x05,0x06,0x01,0x00,0x1b,0x05,0x01,0x00,0x04,0x12,0x10,0x01,0x0f,0x01,0x00,0x1c,0x01,0x00,0x08,0x05,0x01,0x00,0x08,0x01,0x00,0x1b,0x05,0x0d,0x1f,0x06,0x01,0x00,0x1c,0x01,0x00,0x1c,0x05,0x01,0x00,0xff,0x1c,0x06,0x01,0x00,0x1d,0x01,0x00,0x13,0x05,0x06,0x01,0x00,0x13,0x01,0x00,0x13,0x05,0x01,0x00,0x05,0x1e,0x01,0x00,0x1d,0x05,0x09,0x01,0x00,0x1c,0x05,0x09,0x06,0x01,0x00,0x1b,0x01,0x00,0x1b,0x05,0x01,0x00,0x01,0x09,0x06,0x0e,0x00,0xba,0x01,0x00,0x13,0x01,0x00,0x13,0x05,0x01,0x00,0x1e,0x05,0x1c,0x06,0x01,0x00,0x14,0x01,0x7c,0x8d,0x01,0x00,0x10,0x1e,0x01,0xf4,0xcb,0x1b,0x06,0x01,0x00,0x14,0x05,0x01,0x00,0x13,0x05,0x11,0x10,0x01,0x43,0x01,0x00,0x1f,0x01,0x00,0x1f,0x05,0x01,0x00,0x01,0x09,0x06,0x01,0x00,0x1f,0x05,0x01,0x00,0x00,0x14,0x10,0x01,0xd9,0x01,0x00,0x15,0x01,0x00,0x00,0x06,0x01,0x00,0x1b,0x05,0x01,0x00,0x08,0x12,0x10,0x01,0xa5,0x01,0x00,0x1c,0x01,0x00,0x08,0x05,0x01,0x00,0x08,0x01,0x00,0x1b,0x05,0x0d,0x1f,0x06,0x01,0x00,0x1c,0x01,0x00,0x1c,0x05,0x01,0x00,0xff,0x1c,0x06,0x01,0x00,0x15,0x01,0x00,0x15,0x05,0x01,0x00,0x0d,0x21,0x06,0x01,0x00,0x15,0x01,0x00,0x15,0x05,0x01,0x00,0x1c,0x05,0x09,0x06,0x01,0x00,0x1b,0x01,0x00,0x1b,0x05,0x01,0x00,0x01,0x09,0x06,0x0e,0x01,0x55,0x01,0x00,0x15,0x01,0x00,0x15,0x05,0x01,0x00,0x1e,0x05,0x1c,0x06,0x01,0x00,0x16,0x01,0x8b,0x68,0x01,0x00,0x10,0x1e,0x01,0x1d,0x82,0x1b,0x06,0x01,0x00,0x16,0x05,0x01,0x00,0x15,0x05,0x11,0x10,0x01,0xd9,0x01,0x00,0x1f,0x01,0x00,0x1f,0x05,0x01,0x00,0x01,0x09,0x06,0x01,0x00,0x1f,0x05,0x01,0x00,0x01,0x14,0x10,0x02,0x9e,0x01,0x00,0x11,0x01,0x00,0x01,0x06,0x01,0x00,0x12,0x01,0x00,0x00,0x06,0x01,0x00,0x17,0x01,0x00,0x00,0x06,0x01,0x00,0x1b,0x01,0x00,0x00,0x06,0x01,0x00,0x1b,0x05,0x01,0x00,0x08,0x12,0x10,0x02,0x59,0x01,0x00,0x1c,0x01,0x00,0x09,0x05,0x01,0x00,0x08,0x01,0x00,0x1b,0x05,0x0d,0x1f,0x06,0x01,0x00,0x1c,0x01,0x00,0x1c,0x05,0x01,0x00,0xff,0x1c,0x06,0x01,0x00,0x11,0x01,0x00,0x11,0x05,0x01,0x00,0x1c,0x05,0x09,0x01,0xff,0xf1,0x1d,0x06,0x01,0x00,0x12,0x01,0x00,0x12,0x05,0x01,0x00,0x11,0x05,0x09,0x01,0xff,0xf1,0x1d,0x06,0x01,0x00,0x1b,0x01,0x00,0x1b,0x05,0x01,0x00,0x01,0x09,0x06,0x0e,0x02,0x00,0x01,0x00,0x17,0x01,0x00,0x12,0x05,0x01,0x00,0x10,0x1e,0x01,0x00,0x11,0x05,0x1b,0x06,0x01,0x00,0x17,0x01,0x00,0x17,0x05,0x01,0x00,0x1e,0x05,0x1c,0x06,0x01,0x00,0x18,0x01,0x0f,0x91,0x01,0x00,0x10,0x1e,0x01,0x03,0x74,0x1b,0x06,0x01,0x00,0x18,0x05,0x01,0x00,0x17,0x05,0x11,0x10,0x02,0x9e,0x01,0x00,0x1f,0x01,0x00,0x1f,0x05,0x01,0x00,0x01,0x09,0x06,0x01,0x00,0x1f,0x05,0x01,0x00,0x02,0x14,0x10,0x03,0xb2,0x01,0x00,0x0a,0x01,0x01,0x93,0x06,0x01,0x00,0x0b,0x01,0x01,0x00,0x06,0x01,0x00,0x0c,0x01,0x00,0x0b,0x05,0x01,0x00,0x10,0x1e,0x01,0x00,0x0a,0x05,0x1b,0x06,0x01,0x00,0x0d,0x01,0x9d,0xc5,0x06,0x01,0x00,0x0e,0x01,0x81,0x1c,0x06,0x01,0x00,0x0f,0x01,0x00,0x0e,0x05,0x01,0x00,0x10,0x1e,0x01,0x00,0x0d,0x05,0x1b,0x06,0x01,0x00,0x10,0x01,0x00,0x01,0x01,0x00,0x20,0x1e,0x06,0x01,0x00,0x19,0x01,0x00,0x0f,0x05,0x06,0x01,0x00,0x1b,0x01,0x00,0x00,0x06,0x01,0x00,0x1b,0x05,0x01,0x00,0x10,0x12,0x10,0x03,0x7e,0x01,0x00,0x1b,0x05,0x01,0x00,0x08,0x12,0x10,0x03,0x28,0x01,0x00,0x1c,0x01,0x00,0x08,0x05,0x01,0x00,0x08,0x01,0x00,0x1b,0x05,0x0d,0x1f,0x06,0x01,0x00,0x1b,0x05,0x01,0x00,0x07,0x14,0x10,0x03,0x44,0x01,0x00,0x1c,0x01,0x00,0x09,0x05,0x01,0x00,0x08,0x01,0x00,0x1b,0x05,0x0d,0x1f,0x06,0x01,0x00,0x1c,0x01,0x00,0x1c,0x05,0x01,0x00,0xff,0x1c,0x06,0x01,0x00,0x19,0x01,0x00,0x19,0x05,0x01,0x00,0x0c,0x05,0x0d,0x01,0x00,0x10,0x05,0x1d,0x06,0x01,0x00,0x19,0x01,0x00,0x19,0x05,0x01,0x00,0x1c,0x05,0x1a,0x06,0x01,0x00,0x1b,0x01,0x00,0x1b,0x05,0x01,0x00,0x01,0x09,0x06,0x0e,0x03,0x01,0x01,0x00,0x19,0x01,0x00,0x19,0x05,0x01,0x00,0x1e,0x05,0x1c,0x06,0x01,0x00,0x1a,0x01,0x31,0xf0,0x01,0x00,0x10,0x1e,0x01,0x09,0xd2,0x1b,0x06,0x01,0x00,0x1a,0x05,0x01,0x00,0x19,0x05,0x11,0x10,0x03,0xb2,0x01,0x00,0x1f,0x01,0x00,0x1f,0x05,0x01,0x00,0x01,0x09,0x06,0x01,0x00,0x1f,0x05,0x01,0x00,0x04,0x11,0x10,0x03,0xc4,0x01,0x00,0x20,0x01,0x00,0x01,0x06,0x01,0x00,0x20,0x05,0x19,0x18 ]


# 01 -> LOAD  => NEXT 2 BYTES TO STACK 
# 05 -> READ  => READ 8 BYTE FROM BUFFER TO STACK USING THE OFFSET ON THE STACK[0]
# 06 -> WRITE => (STACK[1], STACK[0]) => STACK[1] = DATA,  STACK[0] = OFFSET
# 09 -> ADD   => STACK[1] += STACK[0]
# 10 -> JNZ   => VM_IP = BUF[(VM_IP[0]<<8) + VM_IP[1]]
# 11 -> EQ    => STACK[1] = (STACK[1] == STACK[0])
# 12 -> NE    => STACK[1] = (STACK[1] != STACK[0]) SETS STACK[1] IF NOT EQUAL
# 14 -> JA    => STACK[1] = (STACK[1] > STACK[0]) 
# 18 -> EXIT  => EXIT
# 19 -> NOPE  => NOPE = STACK[0]
# 0D -> MUL   => STACK[1] = STACK[1] * STACK[0]
# 0E -> JMP   => VP_IP = (VP_IP[0] << 8) + VM_IP[1]
# 1E -> SHL   => STACK[1] << STACK[0]
# 1B -> OR    => STACK[1] | STACK[1]
# 1C -> AND   => STACK[1] & STACK[0]
# 1F -> SHR   => STACK[1] << STACK[0]


STACK = []
BUFFER = [0]*4096

skip=0
for i, c in enumerate(CODE):
    if skip > 0:
        skip -= 1 
        continue
    nw = ((CODE[i+1]<<8)+CODE[i+2])
    match c:
        case 0x01:
            skip += 2 
            print(f"{hex(i)}:\t[{c:02X}] LOAD {hex(nw)}")
            STACK.append(nw)
            pass
        case 0x05:
            off = STACK.pop()
            STACK.append(BUFFER[off])
            print(f"{hex(i)}:\t[{c:02X}] READ [{hex(off)}]")
            pass
        case 0x06:
            data = STACK.pop()
            off = STACK.pop()
            BUFFER[off] = data
            print(f"{hex(i)}:\t[{c:02X}] WRITE BUF[{hex(off)}], {hex(data)}")
            pass
        case 0x09:
            val = STACK.pop()
            STACK[-1] += val
            print(f"{hex(i)}:\t[{c:02X}] ADD {hex(val)}")
            pass
        case 0x10:
            print(f"{hex(i)}:\t[{c:02X}] JNZ <{hex(i+nw)}>")
            skip += 2
            pass
        case 0x11:
            last = STACK.pop()
            if STACK[-1] == last:
                STACK[-1] = 0x01
            else:
                STACK[-1] = 0x00
            print(f"{hex(i)}:\t[{c:02X}] EQ")
            pass
        case 0x12:
            last = STACK.pop()
            if STACK[-1] > last:
                STACK[-1] = 0x01
            else:
                STACK[-1] = 0x00
            print(f"{hex(i)}:\t[{c:02X}] BL")
            pass
        case 0x14:
            print(f"{hex(i)}:\t[{c:02X}] JA <{hex(i+nw)}>")
            skip += 2
            pass
        case 0x18:
            print(f"{hex(i)}:\t[{c:02X}] EXIT")
            pass
        case 0x19:
            print(f"{hex(i)}:\t[{c:02X}] NOPE = {hex(STACK[-1])}")
            pass
        case 0x0D:
            val = STACK.pop()
            STACK[-1] = STACK[-1]*val
            print(f"{hex(i)}:\t[{c:02X}] MUL {hex(val)}")
            pass
        case 0x0E:
            print(f"{hex(i)}:\t[{c:02X}] JMP <{hex(i+nw)}>")
            skip += 2
            pass
        case 0x1E:
            val = STACK.pop()
            STACK[-1] = STACK[-1] << val
            print(f"{hex(i)}:\t[{c:02X}] SHL {hex(val)}")
            pass
        case 0x1B:
            val = STACK.pop()
            STACK[-1] |= val
            print(f"{hex(i)}:\t[{c:02X}] OR {hex(val)}")
            pass
        case 0x1C:
            val = STACK.pop()
            STACK[-1] = STACK[-1] & val
            print(f"{hex(i)}:\t[{c:02X}] AND {hex(val)}")
            pass
        case 0x1F:
            val = STACK.pop()
            STACK[-1] = STACK[-1] >> val
            print(f"{hex(i)}:\t[{c:02X}] SHR {hex(val)}")
            pass
        case _:
            print(f"UNKNOWN! = {hex(c)}")
            pass
